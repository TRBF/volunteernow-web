{"version":3,"file":"static/js/478.0098115c.chunk.js","mappings":"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","sources":["services/applicationService.ts","components/ApplicationForm.tsx","pages/OpportunityDetails.tsx"],"sourcesContent":["import axios, { AxiosError, AxiosRequestConfig } from 'axios';\nimport { \n  Application, \n  ApplicationQuestion, \n  ApplicationAnswerSubmission,\n  ApplicationAnswerResponse,\n  ApplicationSubmission,\n  ApplicationError,\n  ApplicationValidationError \n} from '../types/application';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://api.volunteernow.ro/api';\n\nclass ApplicationService {\n  private api = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  constructor() {\n    this.api.interceptors.request.use((config) => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers = config.headers || {};\n        config.headers.Authorization = `Token ${token}`;\n      }\n      return config;\n    });\n  }\n\n  private logRequest = (config: AxiosRequestConfig) => {\n    console.log('[ApplicationService] Request:', {\n      timestamp: new Date().toISOString(),\n      method: config.method?.toUpperCase() || 'UNKNOWN',\n      url: config.url || 'UNKNOWN',\n      headers: config.headers ? {\n        ...config.headers,\n        Authorization: config.headers.Authorization ? 'Token [REDACTED]' : undefined\n      } : {},\n      data: config.data\n    });\n  };\n\n  private logResponse = (response: any) => {\n    console.log('[ApplicationService] Response:', {\n      timestamp: new Date().toISOString(),\n      status: response.status,\n      statusText: response.statusText,\n      data: response.data\n    });\n  };\n\n  private logError = (error: any) => {\n    console.error('[ApplicationService] Error:', {\n      timestamp: new Date().toISOString(),\n      name: error.name,\n      message: error.message,\n      code: error.code,\n      response: error.response ? {\n        status: error.response.status,\n        statusText: error.response.statusText,\n        data: error.response.data\n      } : undefined\n    });\n  };\n\n  private handleError = (error: unknown): ApplicationError => {\n    if (axios.isAxiosError(error)) {\n      const axiosError = error as AxiosError;\n      return {\n        code: axiosError.code || 'UNKNOWN_ERROR',\n        message: axiosError.message,\n        details: axiosError.response?.data\n      };\n    }\n    return {\n      code: 'UNKNOWN_ERROR',\n      message: error instanceof Error ? error.message : 'An unknown error occurred'\n    };\n  };\n\n  private validateSubmission = (submission: ApplicationSubmission): ApplicationValidationError[] => {\n    const errors: ApplicationValidationError[] = [];\n    \n    if (!submission.opportunity) {\n      errors.push({ field: 'opportunity', message: 'Opportunity ID is required' });\n    }\n    \n    if (!submission.user) {\n      errors.push({ field: 'user', message: 'User ID is required' });\n    }\n    \n    if (!submission.answers || submission.answers.length === 0) {\n      errors.push({ field: 'answers', message: 'At least one answer is required' });\n    }\n    \n    return errors;\n  };\n\n  async getApplicationForm(opportunityId: number): Promise<ApplicationQuestion[]> {\n    try {\n      const response = await this.api.get<ApplicationQuestion[]>(`/opportunity/${opportunityId}/application-form/`);\n      this.logResponse(response);\n      return response.data;\n    } catch (error) {\n      this.logError(error);\n      throw this.handleError(error);\n    }\n  }\n\n  async submitApplication(opportunityId: number, answers: ApplicationAnswerSubmission[]): Promise<Application> {\n    try {\n      const userId = localStorage.getItem('user_id');\n      if (!userId) {\n        throw new Error('User not authenticated');\n      }\n\n      const submission: ApplicationSubmission = {\n        opportunity: opportunityId,\n        user: parseInt(userId),\n        answers\n      };\n\n      const validationErrors = this.validateSubmission(submission);\n      if (validationErrors.length > 0) {\n        throw {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid submission data',\n          details: validationErrors\n        };\n      }\n\n      this.logRequest({\n        method: 'post',\n        url: `/opportunity/${opportunityId}/apply/`,\n        data: submission\n      });\n\n      const response = await this.api.post<Application>(`/opportunity/${opportunityId}/apply/`, submission);\n      this.logResponse(response);\n      return response.data;\n    } catch (error) {\n      this.logError(error);\n      throw this.handleError(error);\n    }\n  }\n\n  async getUserApplications(): Promise<Application[]> {\n    try {\n      console.log('[ApplicationService] Fetching user applications...');\n      const token = localStorage.getItem('token');\n      console.log('[ApplicationService] Token:', token ? 'Present' : 'Missing');\n      \n      // Debug: Log the full request configuration\n      const config = {\n        method: 'get',\n        url: '/applications/',\n        headers: {\n          'Authorization': token ? `Token ${token}` : undefined\n        }\n      };\n      console.log('[ApplicationService] Request config:', config);\n      \n      const response = await this.api.get<Application[]>('/applications/');\n      console.log('[ApplicationService] Response data:', response.data);\n      this.logResponse(response);\n      return response.data;\n    } catch (error) {\n      console.error('[ApplicationService] Detailed error:', {\n        error,\n        message: error instanceof Error ? error.message : 'Unknown error',\n        response: error instanceof Error && 'response' in error ? (error as any).response : undefined\n      });\n      this.logError(error);\n      throw this.handleError(error);\n    }\n  }\n\n  async getOpportunityApplications(opportunityId: number): Promise<Application[]> {\n    try {\n      const response = await this.api.get<Application[]>(`/opportunity/${opportunityId}/applications/`);\n      this.logResponse(response);\n      return response.data;\n    } catch (error) {\n      this.logError(error);\n      throw this.handleError(error);\n    }\n  }\n\n  async updateApplicationStatus(applicationId: number, status: 'pending' | 'accepted' | 'rejected'): Promise<Application> {\n    try {\n      const response = await this.api.put<Application>(`/application/${applicationId}/status/`, { status });\n      this.logResponse(response);\n      return response.data;\n    } catch (error) {\n      this.logError(error);\n      throw this.handleError(error);\n    }\n  }\n}\n\nexport const applicationService = new ApplicationService(); ","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Box,\n  Typography,\n  CircularProgress,\n  Alert,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n  FormGroup,\n  FormHelperText,\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { applicationService } from '../services/applicationService';\nimport { ApplicationQuestion, ApplicationAnswerSubmission, ApplicationError } from '../types/application';\n\ninterface ApplicationFormProps {\n  open: boolean;\n  onClose: () => void;\n  opportunityId: number;\n  opportunityTitle: string;\n}\n\nconst ApplicationForm: React.FC<ApplicationFormProps> = ({\n  open,\n  onClose,\n  opportunityId,\n  opportunityTitle,\n}) => {\n  const [answers, setAnswers] = useState<Record<number, string>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<ApplicationError | null>(null);\n  const [success, setSuccess] = useState(false);\n  const [questions, setQuestions] = useState<ApplicationQuestion[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (open) {\n      loadApplicationForm();\n    }\n  }, [open, opportunityId]);\n\n  useEffect(() => {\n    if (open) {\n      setAnswers({});\n      setError(null);\n      setSuccess(false);\n    }\n  }, [open]);\n\n  const loadApplicationForm = async () => {\n    setIsLoading(true);\n    try {\n      const formQuestions = await applicationService.getApplicationForm(opportunityId);\n      setQuestions(formQuestions);\n    } catch (err) {\n      console.error('[ApplicationForm] Failed to load application form:', err);\n      // Default to basic motivation question if can't load custom questions\n      setQuestions([{\n        id: 0,\n        opportunity: opportunityId,\n        question_text: 'Why are you interested in this opportunity?',\n        question_type: 'textarea',\n        is_required: true,\n        order: 0\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAnswerChange = (questionId: number, value: string | Date | null | string[]) => {\n    const formattedValue = value instanceof Date \n      ? value.toISOString().split('T')[0] \n      : Array.isArray(value) \n        ? JSON.stringify(value) \n        : value as string;\n    \n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: formattedValue || ''\n    }));\n  };\n\n  const isFormValid = () => {\n    return questions.every(question => \n      !question.is_required || (answers[question.id] && answers[question.id].trim() !== '')\n    );\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setIsSubmitting(true);\n      setError(null);\n\n      const formattedAnswers: ApplicationAnswerSubmission[] = Object.entries(answers).map(([questionId, answer]) => ({\n        question: parseInt(questionId),\n        answer: answer\n      }));\n\n      await applicationService.submitApplication(opportunityId, formattedAnswers);\n      \n      setSuccess(true);\n      onClose();\n    } catch (err) {\n      const appError = err as ApplicationError;\n      setError(appError);\n      console.error('[ApplicationForm] Error submitting application:', appError);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getPlaceholder = (questionType: string) => {\n    switch (questionType) {\n      case 'text':\n        return 'Type your answer here...';\n      case 'textarea':\n        return 'Write your detailed response here...';\n      case 'number':\n        return 'Enter a number...';\n      case 'date':\n        return 'Select a date...';\n      case 'select':\n        return 'Select an option...';\n      case 'checkbox':\n        return 'Select one or more options...';\n      default:\n        return 'Enter your answer...';\n    }\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose}\n      maxWidth=\"sm\"\n      fullWidth\n      PaperProps={{\n        sx: {\n          borderRadius: 2,\n          p: 2,\n        }\n      }}\n    >\n      <DialogTitle sx={{ pb: 1 }}>\n        <Typography variant=\"h5\" component=\"div\" fontWeight=\"bold\">\n          Apply for {opportunityTitle}\n        </Typography>\n      </DialogTitle>\n      \n      <form onSubmit={(e) => { e.preventDefault(); handleSubmit(); }}>\n        <DialogContent>\n          {error && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {error.message}\n              {error.details && (\n                <Box component=\"ul\" sx={{ mt: 1, mb: 0, pl: 2 }}>\n                  {Array.isArray(error.details) && error.details.map((detail, index) => (\n                    <li key={index}>{detail.message}</li>\n                  ))}\n                </Box>\n              )}\n            </Alert>\n          )}\n          \n          {success && (\n            <Alert severity=\"success\" sx={{ mb: 2 }}>\n              Application submitted successfully!\n            </Alert>\n          )}\n\n          {isLoading ? (\n            <Box display=\"flex\" justifyContent=\"center\" p={3}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              {questions.map((question) => (\n                <Box key={question.id} sx={{ mb: 3 }}>\n                  <Typography variant=\"subtitle1\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                    {question.question_text}\n                    {question.is_required && ' *'}\n                  </Typography>\n                  \n                  {question.question_type === 'date' ? (\n                    <DatePicker\n                      value={answers[question.id] ? new Date(answers[question.id]) : null}\n                      onChange={(newValue) => handleAnswerChange(question.id, newValue)}\n                      disabled={isSubmitting}\n                      slotProps={{\n                        textField: {\n                          fullWidth: true,\n                          required: question.is_required,\n                          sx: {\n                            '& .MuiOutlinedInput-root': {\n                              borderRadius: 2,\n                            }\n                          }\n                        }\n                      }}\n                    />\n                  ) : question.question_type === 'select' ? (\n                    <FormControl \n                      fullWidth \n                      required={question.is_required}\n                      disabled={isSubmitting}\n                      sx={{\n                        '& .MuiOutlinedInput-root': {\n                          borderRadius: 2,\n                        }\n                      }}\n                    >\n                      <InputLabel id={`select-label-${question.id}`}>Select an option</InputLabel>\n                      <Select\n                        labelId={`select-label-${question.id}`}\n                        value={answers[question.id] || ''}\n                        label=\"Select an option\"\n                        onChange={(e) => handleAnswerChange(question.id, e.target.value)}\n                      >\n                        {question.options?.map((option, index) => (\n                          <MenuItem key={index} value={option}>\n                            {option}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                      {question.is_required && !answers[question.id] && (\n                        <FormHelperText error>This field is required</FormHelperText>\n                      )}\n                    </FormControl>\n                  ) : question.question_type === 'checkbox' ? (\n                    <FormGroup>\n                      {question.options?.map((option, index) => {\n                        const currentAnswers = answers[question.id] \n                          ? JSON.parse(answers[question.id]) as string[] \n                          : [];\n                        \n                        return (\n                          <FormControlLabel\n                            key={index}\n                            control={\n                              <Checkbox\n                                checked={currentAnswers.includes(option)}\n                                onChange={(e) => {\n                                  const newAnswers = e.target.checked\n                                    ? [...currentAnswers, option]\n                                    : currentAnswers.filter(item => item !== option);\n                                  handleAnswerChange(question.id, newAnswers);\n                                }}\n                                disabled={isSubmitting}\n                              />\n                            }\n                            label={option}\n                          />\n                        );\n                      })}\n                      {question.is_required && (!answers[question.id] || JSON.parse(answers[question.id]).length === 0) && (\n                        <FormHelperText error>Please select at least one option</FormHelperText>\n                      )}\n                    </FormGroup>\n                  ) : (\n                    <TextField\n                      fullWidth\n                      multiline={question.question_type === 'textarea'}\n                      rows={question.question_type === 'textarea' ? 4 : 1}\n                      type={question.question_type === 'number' ? 'number' : 'text'}\n                      placeholder={getPlaceholder(question.question_type)}\n                      value={answers[question.id] || ''}\n                      onChange={(e) => handleAnswerChange(question.id, e.target.value)}\n                      disabled={isSubmitting}\n                      required={question.is_required}\n                      sx={{\n                        '& .MuiOutlinedInput-root': {\n                          borderRadius: 2,\n                        }\n                      }}\n                    />\n                  )}\n                </Box>\n              ))}\n            </LocalizationProvider>\n          )}\n        </DialogContent>\n\n        <DialogActions sx={{ px: 3, pb: 2 }}>\n          <Button\n            onClick={onClose}\n            disabled={isSubmitting || isLoading}\n            sx={{\n              borderRadius: 2,\n              textTransform: 'none',\n              px: 3,\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            disabled={isSubmitting || isLoading || !isFormValid()}\n            sx={{\n              borderRadius: 2,\n              textTransform: 'none',\n              px: 3,\n            }}\n          >\n            {isSubmitting ? (\n              <CircularProgress size={24} color=\"inherit\" />\n            ) : (\n              'Submit Application'\n            )}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default ApplicationForm; ","import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n  Container,\n  Box,\n  Typography,\n  Paper,\n  Button,\n  Chip,\n  Divider,\n  TextField,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  useTheme,\n  Grid,\n  CircularProgress,\n  Alert,\n} from '@mui/material';\nimport {\n  LocationOn,\n  CalendarToday,\n  Business,\n  ArrowBack,\n  Assignment as RequirementsIcon,\n  Group as ParticipantsIcon,\n} from '@mui/icons-material';\nimport { motion } from 'framer-motion';\nimport { opportunityService } from '../services/api';\nimport Header from '../components/Header';\nimport ApplicationForm from '../components/ApplicationForm';\n\ninterface Opportunity {\n  id: string;\n  title: string;\n  description: string;\n  image_url: string;\n  location: string;\n  date: string;\n  organization: string;\n  requirements: string[];\n  participants: {\n    id: string;\n    username: string;\n    profile_picture: string;\n  }[];\n}\n\nconst OpportunityDetails = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const theme = useTheme();\n  const [opportunity, setOpportunity] = useState<Opportunity | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [comment, setComment] = useState('');\n  const [isApplicationFormOpen, setIsApplicationFormOpen] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (id) {\n      fetchOpportunityDetails(id);\n    }\n  }, [id]);\n\n  const fetchOpportunityDetails = async (opportunityId: string) => {\n    try {\n      const data = await opportunityService.getOpportunityById(opportunityId);\n      setOpportunity(data);\n    } catch (err) {\n      console.error('Error fetching opportunity details:', err);\n      setError('Failed to load opportunity details');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBack = () => {\n    navigate(-1);\n  };\n\n  const handleCommentSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    // TODO: Implement comment submission\n    setComment('');\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"100vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error || !opportunity) {\n    return (\n      <Box p={3}>\n        <Alert severity=\"error\">\n          {error || 'Failed to load opportunity details'}\n        </Alert>\n      </Box>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Box sx={{ minHeight: '100vh' }}>\n        <Container maxWidth=\"lg\" sx={{ py: 6 }}>\n          <Button\n            startIcon={<ArrowBack />}\n            onClick={handleBack}\n            sx={{ mb: 2 }}\n          >\n            Back to Opportunities\n          </Button>\n\n          <Paper elevation={3} sx={{ p: 4 }}>\n            <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '2fr 1fr' }, gap: 4 }}>\n              <Box>\n                <Typography variant=\"h4\" gutterBottom>\n                  {opportunity.title}\n                </Typography>\n                <Box sx={{ mb: 3 }}>\n                  <Chip\n                    icon={<Business />}\n                    label={opportunity.organization}\n                    sx={{ mr: 1 }}\n                  />\n                  <Chip\n                    icon={<LocationOn />}\n                    label={opportunity.location}\n                    sx={{ mr: 1 }}\n                  />\n                  <Chip\n                    icon={<CalendarToday />}\n                    label={new Date(opportunity.date).toLocaleDateString()}\n                  />\n                </Box>\n                <Box\n                  component=\"img\"\n                  src={opportunity.image_url}\n                  alt={opportunity.title}\n                  sx={{\n                    width: '100%',\n                    height: 'auto',\n                    borderRadius: 1,\n                    mb: 3,\n                  }}\n                />\n                <Typography variant=\"body1\" paragraph>\n                  {opportunity.description}\n                </Typography>\n\n                <Divider sx={{ my: 4 }} />\n\n                <Typography variant=\"h6\" gutterBottom>\n                  Requirements\n                </Typography>\n                <List>\n                  {opportunity.requirements.map((req, index) => (\n                    <ListItem key={index}>\n                      <ListItemText primary={req} />\n                    </ListItem>\n                  ))}\n                </List>\n\n                <Divider sx={{ my: 4 }} />\n\n                <Typography variant=\"h6\" gutterBottom>\n                  Participants\n                </Typography>\n                <List>\n                  {opportunity.participants.map((participant) => (\n                    <ListItem key={participant.id}>\n                      <ListItemAvatar>\n                        <Avatar src={participant.profile_picture} />\n                      </ListItemAvatar>\n                      <ListItemText primary={participant.username} />\n                    </ListItem>\n                  ))}\n                </List>\n              </Box>\n\n              <Box>\n                <Paper elevation={2} sx={{ p: 3 }}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Join this Opportunity\n                  </Typography>\n                  <Button\n                    variant=\"contained\"\n                    fullWidth\n                    sx={{ mb: 3 }}\n                    onClick={() => setIsApplicationFormOpen(true)}\n                  >\n                    Sign Up\n                  </Button>\n\n                  <Divider sx={{ my: 3 }} />\n\n                  <Typography variant=\"h6\" gutterBottom>\n                    Comments\n                  </Typography>\n                  <Box component=\"form\" onSubmit={handleCommentSubmit}>\n                    <TextField\n                      fullWidth\n                      multiline\n                      rows={3}\n                      placeholder=\"Add a comment...\"\n                      value={comment}\n                      onChange={(e) => setComment(e.target.value)}\n                      sx={{ mb: 2 }}\n                    />\n                    <Button\n                      type=\"submit\"\n                      variant=\"contained\"\n                      fullWidth\n                      disabled={!comment.trim()}\n                    >\n                      Post Comment\n                    </Button>\n                  </Box>\n                </Paper>\n              </Box>\n            </Box>\n          </Paper>\n        </Container>\n      </Box>\n\n      {/* Application Form Dialog */}\n      <ApplicationForm\n        open={isApplicationFormOpen}\n        onClose={() => setIsApplicationFormOpen(false)}\n        opportunityId={parseInt(id || '0')}\n        opportunityTitle={opportunity.title}\n      />\n    </motion.div>\n  );\n};\n\nexport default OpportunityDetails; "],"names":["API_BASE_URL","process","REACT_APP_API_BASE_URL","applicationService","constructor","api","axios","create","baseURL","headers","logRequest","config","_config$method","console","log","timestamp","Date","toISOString","method","toUpperCase","url","Authorization","undefined","data","logResponse","response","status","statusText","logError","error","name","message","code","handleError","isAxiosError","_axiosError$response","axiosError","details","Error","validateSubmission","submission","errors","opportunity","push","field","user","answers","length","this","interceptors","request","use","token","localStorage","getItem","getApplicationForm","opportunityId","get","submitApplication","userId","parseInt","validationErrors","post","getUserApplications","getOpportunityApplications","updateApplicationStatus","applicationId","put","_ref","open","onClose","opportunityTitle","setAnswers","useState","isSubmitting","setIsSubmitting","setError","success","setSuccess","questions","setQuestions","isLoading","setIsLoading","useEffect","loadApplicationForm","async","formQuestions","err","id","question_text","question_type","is_required","order","handleAnswerChange","questionId","value","formattedValue","split","Array","isArray","JSON","stringify","prev","getPlaceholder","questionType","_jsxs","Dialog","maxWidth","fullWidth","PaperProps","sx","borderRadius","p","children","_jsx","DialogTitle","pb","Typography","variant","component","fontWeight","onSubmit","e","preventDefault","formattedAnswers","Object","entries","map","_ref2","answer","question","appError","handleSubmit","DialogContent","Alert","severity","mb","Box","mt","pl","detail","index","display","justifyContent","CircularProgress","LocalizationProvider","dateAdapter","AdapterDateFns","_question$options","_question$options2","color","DatePicker","onChange","newValue","disabled","slotProps","textField","required","FormControl","InputLabel","Select","labelId","label","target","options","option","MenuItem","FormHelperText","FormGroup","currentAnswers","parse","FormControlLabel","control","Checkbox","checked","includes","newAnswers","filter","item","TextField","multiline","rows","type","placeholder","DialogActions","px","Button","onClick","textTransform","every","trim","size","OpportunityDetails","useParams","navigate","useNavigate","setOpportunity","useTheme","loading","setLoading","comment","setComment","isApplicationFormOpen","setIsApplicationFormOpen","fetchOpportunityDetails","opportunityService","getOpportunityById","alignItems","minHeight","motion","div","initial","opacity","y","animate","exit","transition","duration","Container","py","startIcon","ArrowBack","handleBack","Paper","elevation","gridTemplateColumns","xs","md","gap","gutterBottom","title","Chip","icon","Business","organization","mr","LocationOn","location","CalendarToday","date","toLocaleDateString","src","image_url","alt","width","height","paragraph","description","Divider","my","List","requirements","req","ListItem","ListItemText","primary","participants","participant","ListItemAvatar","Avatar","profile_picture","username","ApplicationForm"],"sourceRoot":""}