{"version":3,"file":"static/js/916.5366f531.chunk.js","mappings":"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","sources":["pages/Profile.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Box,\n  Typography,\n  Avatar,\n  Paper,\n  Grid,\n  Chip,\n  CircularProgress,\n  Container\n} from '@mui/material';\nimport { profileService } from '../services/api';\n\ninterface Profile {\n  id: number;\n  profile_picture: string;\n  username: string;\n  first_name: string;\n  last_name: string;\n  name: string;\n  date_of_birth: string;\n  gender: string | null;\n  description: string;\n  account_type: string;\n  cover_image: string | null;\n  user: number;\n  hours: number;\n  most_fq: string;\n  count: number;\n}\n\nconst Profile = () => {\n  const { id } = useParams<{ id: string }>();\n  const [profile, setProfile] = useState<Profile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchProfile = async () => {\n      try {\n        setLoading(true);\n        const data = await profileService.getUserProfileById(Number(id));\n        setProfile(data);\n        setError(null);\n      } catch (err) {\n        setError('Failed to load profile');\n        console.error('Error loading profile:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (id) {\n      fetchProfile();\n    }\n  }, [id]);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\n        <Typography color=\"error\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\n        <Typography>Profile not found</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Paper elevation={3} sx={{ p: 3, mt: 3, borderRadius: 2 }}>\n        <Grid container spacing={3}>\n          {/* Profile Header */}\n          <Grid item xs={12} display=\"flex\" alignItems=\"center\" gap={3}>\n            <Avatar\n              src={profile.profile_picture}\n              alt={profile.username}\n              sx={{ width: 120, height: 120 }}\n            />\n            <Box>\n              <Typography variant=\"h4\">\n                {profile.first_name} {profile.last_name}\n              </Typography>\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                @{profile.username}\n              </Typography>\n            </Box>\n          </Grid>\n\n          {/* Stats Section */}\n          <Grid item xs={12}>\n            <Box display=\"flex\" gap={4} my={2}>\n              <Box>\n                <Typography variant=\"h6\">{profile.hours}</Typography>\n                <Typography color=\"text.secondary\">Volunteer Hours</Typography>\n              </Box>\n              <Box>\n                <Typography variant=\"h6\">{profile.count}</Typography>\n                <Typography color=\"text.secondary\">Events Attended</Typography>\n              </Box>\n              <Box>\n                <Typography variant=\"h6\">{profile.most_fq}</Typography>\n                <Typography color=\"text.secondary\">Most Frequent Activity</Typography>\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Description */}\n          <Grid item xs={12}>\n            <Typography variant=\"h6\" gutterBottom>About</Typography>\n            <Typography paragraph>\n              {profile.description || \"No description provided\"}\n            </Typography>\n          </Grid>\n\n          {/* Additional Info */}\n          <Grid item xs={12}>\n            <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n              {profile.date_of_birth && (\n                <Chip \n                  label={`Birthday: ${new Date(profile.date_of_birth).toLocaleDateString()}`}\n                  variant=\"outlined\"\n                />\n              )}\n              {profile.gender && (\n                <Chip \n                  label={`Gender: ${profile.gender}`}\n                  variant=\"outlined\"\n                />\n              )}\n              {profile.account_type && (\n                <Chip \n                  label={`Account Type: ${profile.account_type}`}\n                  variant=\"outlined\"\n                />\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default Profile;"],"names":["Profile","id","useParams","profile","setProfile","useState","loading","setLoading","error","setError","useEffect","async","data","profileService","getUserProfileById","Number","err","console","fetchProfile","_jsx","Box","display","justifyContent","alignItems","minHeight","children","CircularProgress","Typography","color","Container","maxWidth","Paper","elevation","sx","p","mt","borderRadius","_jsxs","Grid","container","spacing","item","xs","gap","Avatar","src","profile_picture","alt","username","width","height","variant","first_name","last_name","my","hours","count","most_fq","gutterBottom","paragraph","description","flexWrap","date_of_birth","Chip","label","Date","toLocaleDateString","gender","account_type"],"sourceRoot":""}